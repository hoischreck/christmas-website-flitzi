<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css" type="text/css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <title>Geschenk Nr.1</title>
</head>
<body>

    <!-- Navigation Bar -->
    
    <%- include ('partials/navTop.ejs') %>
    
    <!-- Sections  -->

<section>

    <div class="intro__container_header">
        Geschenk 1
    </div>

    <div class="container-secondary flex-column flex-xy">
        <div class="intro__container_text" id="present_3__text_container">
            <p class="intro__paragraph">
                Du nimmst dich also der Geschenkesuche an? Dann wünsche ich dir von hier an viel Spaß und Vergnügen - einen Weg zurück gibt es nicht.
                <br>
                <br>
                Deine erste Herausforderung wird es sein, ein Spiel zu spielen, dass weit über aller Berge und Täler bekannt ist.
                Ein Spiel das seit jahrtausenden gespielt wird. Es ist nicht Rommé, aber es ist <b>fast</b> identisch. 
                <br>
                Gesucht ist ein Kartenspiel, das große Ähnlichkeit mit UNO hat.
                <br>
                Was wird es wohl sein?
            </p>
        </div>
        <!-- Add input here, so that user has to enter "Mau Mau" -->
        
        
        <!-- Game of Romme -->
    </div>

    
    <!-- remove hide -->
    <div class="container-secondary flex-column flex-xy lobby__container">

        <div class="lobby__input_container">
            <label for="joinLobby"></label>
            <input class="text-input-1" type="text" placeholder="join code" name="joinLobby"> 
            <input class="btn-1" type="button" value="join lobby" onclick="joinLobby()">
        
            <p id="couldNotJoin" class="feedback-paragraph text-error hide">
                Code does not exist
            </p>
        </div>
        
        <div class="lobby__input_container">
            <label for="createLobby"></label>
            <input class="text-input-1" type="text" placeholder="create new lobby code" name="createLobby">
            <input class="btn-1" type="button" value="create lobby" onclick="createNewLobby()">
            
            <p id="addedLobby" class="feedback-paragraph text-success hide">
                Sucessfully added lobby
            </p>

            <p id="codeAlreadyExists" class="feedback-paragraph text-error hide">
                Code already exists
            </p>
        </div>

        

    </div>

    <div class="container-secondary flex-xy flex-column joined_lobby__container_main hide" style="margin-top: 2rem;">

        <input class="btn-4" type="button" value="leave lobby" onclick="leaveLobby()">

        <div class="flex-column flex-xy intro__container_text joined_lobby__container">
            <h2 class="challenge__heading">
                MauMau-Lobby (2 Spieler)
            </h2>
            <div class="joined_lobby_info__container"></div>
            <div class="joined_lobby_ready__container flex-column flex-xy">
                <input id="joined_lobby_ready__btn" class="btn-1 btn-ready" type="button" value="Bereit" onclick="toggleReady()">
                <span id="playerReady" class="challenge__status"></span>
            </div>
        </div>
    </div>
    
    <div class="game__container-secondary flex-column flex-xy hide">
        <!-- add hide -->
        <div class="game__container ">
            
            <div class="game__container_main flex-row flex-xy">
                <div id="enemy_turn" class="game__player_info game__turn_info" style="margin-left: 3rem;">
                    Am Zug
                </div>
                <div class="game__container_enemy">
        
                    <!-- <div class="cards_container">
                                    <div class="card"></div>
                                </div> -->
                </div>
                <div id="enemy_name" class="game__player_info game__player_info_enemy" style="margin-right: 3rem;">
                    Gegnername
                </div>
            </div>
        
            <div class="game__container_field">

                <div class="flex-row flex-xy">
                    <div id="game__field_info_left" class="game__field_info" style="margin-right: 3rem; width: 20%;">
                        
                    </div>

                    <div class="game__upper_card_container">
                    
                    </div>
                    <div class="game__deck_card_container">
                    
                    </div>

                    <div id="remaining_cards" class="game__field_info" style="margin-left: 3rem;">
                        10
                    </div>
                </div>

            </div>
        
            <div class="game__container_main flex-row flex-xy">
                <div id="player_turn" class="game__player_info game__turn_info" style="margin-left: 3rem;">
                    Am Zug
                </div>
                <div class="game__container_player">
        
                    <!-- <div class="cards_container">
                                    <div class="card"></div>
                                </div> -->
                </div>
                <div class="game__player_info" style="margin-right: 3rem; background-color: var(--dark-green);">
                    
                </div>
            </div>
        
        </div>
    </div>
   
    <!-- <h2>Spielersuche</h2> -->

    <!-- <div class="container-secondary flex-xy flex-column player_search__container">

    </div> -->

    <div id="terminatedConnection" class="container-secondary flex-column flex-xy hide" style="margin-top: 2rem;">

        <div class="intro__container_text no-margin" style="margin: 0;">
            <p id="error_paragraph" class="intro__paragraph">
                <b><u>ERROR!</u></b>
                <br>
                <b>An Error occured</b>
            </p>
        </div>

    </div>


<script>
    // add server side commands to overview lobbies, etc
    // kick from lobby when connecting with new client
    const playerSearchContainerClass = "player_search__container";
    const playerDivClass = "player_search_player__container";

    const maxPlayerCount = 2;

    const socket = new WebSocket("ws://" + window.location.href.split("//")[1]);

    const user = JSON.parse('<%- JSON.stringify(user) %>');
    var lobbyCode;

    window.addEventListener("unload", function () {
        if (socket.readyState == WebSocket.OPEN) {  
            if (!(lobbyCode == undefined)) {
                leaveLobby();
            };
            socket.send(JSON.stringify({
                type: "closeConnection",
                name: user.name
            }))
        }   //socket.close(); //connection is closed by server
    });

    socket.addEventListener("open", (event) => {
        socket.send(JSON.stringify({
                type: "newUser",
                presentNum: 1,
                userName: user.name,
                date: Date.now()
            }));
    
        socket.send(JSON.stringify({
                type: "joinMauMauPlayerSearch",
            }));
    })


    socket.addEventListener("close", (event) => {
        displayTerminatedConnection("Only 1 continuous connection allowed");
        let lobby = $(".lobby__container");
        if (!lobby.hasClass("hide")) {
            lobby.addClass("hide");
        }
    })
    // allow leaving a lobby with a button click

    // Lobby-handling
    socket.addEventListener("message", (event) => {
        let data = JSON.parse(event.data);
        console.log(data)
        switch (data.type) {
            // case "terminatingConnection":
            //     console.log("termination");
            //     displayTerminatedConnection(data.reason);
            //     break;

            case "addedLobby":
                displaySuccessfullyAddedLobby();
                break;
            case "codeAlreadyExists":
                displayCodeAlreadyExists();
                break;
            case "couldNotJoin":
                displayCouldNotJoin();
                break;

            case "leftLobby":
                displayLeavingLobby();
                // implement logic for leaving a lobby
                break;

            case "playerDisconnected":
                displayEnemyDisconnect(data.disconnectedPlayer);
                break;

            case "updateLobby":
                console.log("update call")
                let players = [];
                for (let i in data.players) {
                    players.push(data.players[i].name);
                }
                lobbyCode = data.code;
                displayJoinedLobby(
                    lobbyCode = lobbyCode,
                    playerList = players,
                    lobbySize = data.lobbySize,
                    readyCount = data.readyCount
                );
                break;

            // todo: outsource into extra handler
            case "gameStart":
                displayGameStart();
                break;

            case "updateCardView":
                myTurn = false;
                currentUpperCard = data.upperCard;
                myCards = data.playerCards;
                clearAllCards();
                displayPlayerCards(data.playerCards);
                displayField(data.remainingInDeck, data.upperCard);
                // since 1v1 -> only 1 enemy
                displayEnemyCards(Object.values(data.enemyCardAmount)[0]);

                $("#remaining_cards").html(data.remainingInDeck);
                $("#enemy_name").html(Object.keys(data.enemyCardAmount)[0]);

                break;

            case "playerTurn":
                drawsLeft = data.drawsLeft;
                myTurn = true;
                displayPlayerTurn();
                break;

        }
    })

    var myTurn;
    var myCards;
    var currentUpperCard;
    var drawsLeft;

    function displayPlayerTurn() {
        let enemy = $("#enemy_turn");
        let player = $("#player_turn");
        if (!enemy.hasClass("game__turn-inactive")) {
            enemy.addClass("game__turn-inactive");
            enemy.html("Nicht am Zug")
        }
        if (player.hasClass("game__turn-inactive")) {
            player.removeClass("game__turn-inactive");
            player.html("Am Zug");
        }
    }

    function displayEnemyTurn() {
        let enemy = $("#enemy_turn");
        let player = $("#player_turn");
        if (enemy.hasClass("game__turn-inactive")) {
            enemy.removeClass("game__turn-inactive");
            enemy.html("Am Zug")
        }
        if (!player.hasClass("game__turn-inactive")) {
            player.addClass("game__turn-inactive");
            player.html("Nicht am Zug");
        }
    }

    function displayEnemyDisconnect() {
        displayGameStop();
        displayLeavingLobby();
        displayTerminatedConnection("Player 2 disconnected");
        setTimeout(() => {
            displayNoTerminatedConnecion();
        }, 10000)
    }

    function onCardClick(event) {
        if (!myTurn) return;
        let cardElement = event.target;
        let path = cardElement.getAttribute("href");
        let card;
        console.log("trying to find card")
        for (let c in myCards) {
            if (myCards[c].path == path) {
                card = myCards[c];
                break;
            }
        }
        if (card === undefined) return;
        console.log("found card")
        // let value = path.split("_").at(-1).split(".")[0];
        // let rank = path.split("/").at(-1).split("_")[0];

        // basice maumau ruleset
        if (currentUpperCard !== null) {
            if (card.value != currentUpperCard.value && card.rank != currentUpperCard.rank) return;
        }
        // card can be placed
        socket.send(JSON.stringify({
            type: "playCard",
            playerName: user.name,
            playedCard: card,
            upperCard: currentUpperCard
        }))
        myTurn = false;
        displayEnemyTurn();
    }

    function onCardDraw() {
        if (!myTurn) return;
        socket.send(JSON.stringify({
            type: "drawCard",
            playerName: user.name
        }))
        myTurn = false; // is checked on server side again
        if (drawsLeft < 2) {
            displayEnemyTurn();
        }
    }

    function displayGameStart() {
        let lobby = $(".joined_lobby__container_main");
        if (!lobby.hasClass("hide")) {
            lobby.addClass("hide");
        } 
        let game = $(".game__container-secondary");
        if (game.hasClass("hide")) {
            game.removeClass("hide");
        } 
        displayEnemyTurn();
    }

    function displayGameStop() {
        let game = $(".game__container-secondary");
        let lobby = $(".joined_lobby__container_main");
        if (lobby.hasClass("hide")) {
            lobby.removeClass("hide");
        }
        if (!game.hasClass("hide")) {
            game.addClass("hide");
        } 
    }

    // displayPlayerCards([{ path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }]);

    const cardWidth = parseInt(window.getComputedStyle(document.body).getPropertyValue("--card-width").replace("px", ""));

    displayEnemyCards(7);
    displayPlayerCards([{ path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }, { path: "/img/cards/blue.png" }])
    displayField(5, { path: "/img/cards/blue.png" });

    
    function clearAllCards() {
        $(".game__container_player").empty();
        $(".game__container_enemy").empty();
        $(".game__deck_card_container").empty();
        $(".game__upper_card_container").empty();
    }

    function displayField(remaining, upperCard=null) {

        // display deck card (background image is implicitly backside of card)
        if (remaining > 0) {
            let newCardContainer = document.createElement("div");
            newCardContainer.classList.add("cards_container_main")
            let newCard = document.createElement("div");
            newCard.classList.add("card");
            newCard.classList.add("card_deck");
            newCard.onclick = onCardDraw;
            newCardContainer.appendChild(newCard);
            $(".game__deck_card_container").append(newCardContainer);
        }
        // check if upper card exists
        if (upperCard !== null) {
            let newCardContainer = document.createElement("div");
            newCardContainer.classList.add("cards_container_main")
            let newCard = document.createElement("div");
            newCard.classList.add("card");
            newCard.style.backgroundImage = `url(${upperCard.path})`;
            newCardContainer.appendChild(newCard);

            $(".game__upper_card_container").append(newCardContainer);
        }
    }

    function displayPlayerCards(cards) {
        let k = 400;
        let cardAmount = cards.length;
        let totalCardWidth = cardAmount * cardWidth;
        let freeSpace = $(".game__container_player").width() - k;

        let overlappingSpace;
        if (totalCardWidth > freeSpace) {
            overlappingSpace = Math.floor((totalCardWidth-freeSpace)/cardAmount);
        }
        for (let c in cards) {
            let path = cards[c].path;

            let newCardContainer = document.createElement("div");
            newCardContainer.classList.add("cards_container_main")
            let newCard = document.createElement("div");
            newCard.classList.add("card");
            newCard.classList.add("card-raise");
            newCard.setAttribute("href", path)
            newCard.onclick = onCardClick;
            newCard.style.backgroundImage = `url(${path})`;
            newCardContainer.appendChild(newCard);

            if (overlappingSpace !== undefined) {
                newCardContainer.style.marginLeft = `${-overlappingSpace}px`;
            }

            $(".game__container_player").append(newCardContainer);
        }
        if (overlappingSpace !== undefined) {
            $(".game__container_player").css("margin-left", `${overlappingSpace}px`);
        }
    }

    function displayEnemyCards(cardAmount) {
        let k = 400;
        let totalCardWidth = cardAmount * cardWidth;
        let freeSpace = $(".game__container_enemy").width() - k;

        let overlappingSpace;
        if (totalCardWidth > freeSpace) {
            overlappingSpace = Math.floor((totalCardWidth - freeSpace) / cardAmount);
            console.log(overlappingSpace);
        }
        for (let i = 0; i < cardAmount; i++) {

            let newCardContainer = document.createElement("div");
            newCardContainer.classList.add("cards_container_main")
            let newCard = document.createElement("div");
            newCard.classList.add("card");
            newCardContainer.appendChild(newCard);

            if (overlappingSpace !== undefined) {
                newCardContainer.style.marginLeft = `${-overlappingSpace}px`;
            }

            $(".game__container_enemy").append(newCardContainer);
        }
        if (overlappingSpace !== undefined) {
            $(".game__container_enemy").css("margin-left", `${overlappingSpace}px`);
        }
    }


    //todo: unnecessary? 
    // function setupRoutine() {
    //     checkIfInLobby();
    // }

    // function checkIfInLobby() {
        
    // }

    function displayTerminatedConnection(reason) {
        let errorContainer = $("#terminatedConnection");
        if (errorContainer.hasClass("hide")) {
            errorContainer.removeClass("hide");
        }
        displayLeavingLobby();
        $("#error_paragraph").html(`<b><u>Error!</u></b><br><b>${reason}</b>`)
    }

    function displayNoTerminatedConnecion() {
        let errorContainer = $("#terminatedConnection");
        if (!errorContainer.hasClass("hide")) {
            errorContainer.addClass("hide");
        }
    }

    // create new lobby
    function createNewLobby() {
        let code = $("input[name='createLobby']").val(); //.replace(" ", "-")
        if (!validCode(code)) {
            return; // return some sort of error feedback
        }
        socket.send(JSON.stringify({
            type: "newLobby",
            code: code,
            maxPlayers: maxPlayerCount
        }));
    }

    // e.g. dont allow empty codes 
    function validCode(code) {
        return true;
    }

    // join lobby
    function joinLobby() {
        let code = $("input[name='joinLobby']").val();
        socket.send(JSON.stringify({
            type: "joinLobby",
            playerName: user.name,
            lobbyCode: code
        }))
    }

    function displayJoinedLobby(lobbyCode, playerList, lobbySize, readyCount) {
        let lobby = $(".lobby__container");
        if (!lobby.hasClass("hide")) {
            lobby.addClass("hide");
        }
        let joinedLobby = $(".joined_lobby__container_main");
        if (joinedLobby.hasClass("hide")) {
            joinedLobby.removeClass("hide");
        }
        $(".joined_lobby_info__container").html(
            `
            <b>Code: </b>${lobbyCode}
            <br>
            <b>Spieler: </b>${JSON.stringify(playerList)}
            `
        )
        $("#playerReady").html(
            `
            Bereit: ${readyCount}/${lobbySize}
            `
        )

    }   

    function leaveLobby() {
        socket.send(JSON.stringify({
            type: "leaveLobby",
            lobby: lobbyCode,
            name: user.name
        }));  
    }

    function displayLeavingLobby() {
        let lobby = $(".lobby__container");
        if (lobby.hasClass("hide")) {
            lobby.removeClass("hide");
        }
        let joinedLobby = $(".joined_lobby__container_main");
        if (!joinedLobby.hasClass("hide")) {
            joinedLobby.addClass("hide");
        }
    }

    function displayCodeAlreadyExists() {
        let element1 = $("#codeAlreadyExists");
        if (element1.hasClass("hide")) {
            element1.removeClass("hide");
        }
        let element2 = $("#addedLobby");
        if (!element2.hasClass("hide")) {
            element2.addClass("hide");
        }
    }

    function displaySuccessfullyAddedLobby() {
        let element1 = $("#codeAlreadyExists");
        if (!element1.hasClass("hide")) {
            element1.addClass("hide");
        }
        let element2 = $("#addedLobby");
        if (element2.hasClass("hide")) {
            element2.removeClass("hide");
        }
    }
    
    function displayCouldNotJoin() {
        let element = $("#couldNotJoin");
        if (element.hasClass("hide")) {
            element.removeClass("hide");
        }
    }

    function toggleReady() {
        let btn = $("#joined_lobby_ready__btn");
        let ready = btn.hasClass("btn-ready");
        if (ready) {
            // send ready
            btn.removeClass("btn-ready");
            btn.addClass("btn-notready");
            btn.attr("value", "Nicht Bereit");
            socket.send(JSON.stringify({
                type: "readyPlayer",
                name: user.name,
                lobby: lobbyCode
            }))
        } else {
            // send unready
            btn.addClass("btn-ready");
            btn.removeClass("btn-notready");
            btn.attr("value", "Bereit");
            socket.send(JSON.stringify({
                type: "unreadyPlayer",
                name: user.name,
                lobby: lobbyCode
            }))
        }
    }


// case "updatePlayerSearch":
// console.log(data.searchingPlayers);
// displaySearchingPlayers(data.searchingPlayers);
// break;

// function displaySearchingPlayers(playerArray) {
// for (let p in playerArray) {
// let name = playerArray[p];

// let playerBtn = document.createElement("input");
// playerBtn.classList.add(playerDivClass);
// playerBtn.value = name;
// playerBtn.type = "button";

// document.querySelector("." + playerSearchContainerClass).appendChild(playerBtn);
// }
// }
</script>
</body>
</html>

